#include <stdio.h>
#define n 100
#define k 64
void indsort(int origin[n], int copy[n], int ind[n], int size){
int i = 0;
int buff = 0;
int buff2 = 0;
int g = 0;
for (i = 0; i < size; i++){
	if(origin[i]!=copy[i]){
		g = i;
		while(origin[i]!=copy[g]){
			g++;
		}
	buff = copy[g];
	copy[g]= copy[i];
	copy[i] = buff;
	buff2 = ind[g];
	ind[g] = ind[i];
	ind[i] = buff2;
		
}
}
}


void qSort(int *num, int l, int r)
{
    if (l < r)
    {
        int l_grn = l, r_grn = r, centr = num[(l_grn + r_grn) / 2];
        do
        {
            while (num[l_grn] < centr) l_grn++;
            while (num[r_grn] > centr) r_grn--;
            if (l_grn <= r_grn)
            {
                int tmp = num[l_grn];
                num[l_grn] = num[r_grn];
                num[r_grn] = tmp;
                l_grn++;
                r_grn--;
            }
        } while (l_grn <= r_grn);
        qSort(num, l, r_grn);
        qSort(num, l_grn, r);
    }
}
void matbehsic(int b[k][k], int sihe, int str, int stlb, int newmat[k][k]) {
    int indstroki = 0; 
    int indstolb = 0; 
    for(int i = 0; i < sihe-1; i++) { 
        if(i == str) {
            indstroki = 1; 
}

        indstolb = 0; 
        for(int j = 0; j < sihe-1; j++) {
            if(j == stlb) {
                indstolb = 1;
}

            newmat[i][j] = b[i + indstroki][j + indstolb];
}
}
}
int opred(int b[k][k], int sihe) {
int det=0;
int kof=1;
if (sihe==1) {
det=b[0][0];
}
if (sihe==2) {
det=(b[0][0] * b[1][1]) - (b[1][0] * b[0][1]);
return det;
}
else {
	int newmat[k][k];
       for(int i = 0; i < sihe-1; i++) {
            newmat[i][k] = b[sihe-1][k];
}
for(int j = 0; j < sihe; j++) {
matbehsic(b,sihe,0,j,newmat);
det = det + (kof * b[0][j] * opred(newmat, sihe-1));
            kof = -kof;
}
}
return det;
}

int main() {

int i = 0, j = 0,v = 0,c = 0,l = 0,x = 0,q = 0,m = 0, f = 1, t=0, e = 0, g=0;
printf("\n");
printf("vvedite kolvo \n");
scanf("%d",&c);
int z2[c];
int w[c];
int p[c];
int a[k][k];
int b[c][k][k];
int heh[c][k][k];
int rnk[k];

while(l<c){
	
	
	printf("vvedite rank \n");
	scanf("%d",&v);
	rnk[f]=v;
	
	if(v>k){
	return 0;
}
	for (i = 0; i < v;i++) {
		for(j = 0; j<v; j++) {
		printf("a[%d][%d]",i,j);
		scanf("%d",&a[i][j]);
		b[f][i][j]=a[i][j];
		heh[f][i][j]=a[i][j];
		//printf("!%d!  %d", b[f][i][j], f);
		//printf("+%d+", b[2][0][0]);


}	
}
		//printf("+%d+", b[2][0][0]);
q=opred(a,v);
//printf("opred %d\n",q);
w[l]=q;
z2[l]=q;

//printf("w[%d]=%d\n",l_grn,w[l_grn]);
//printf("blyat[%d]=%d\n",l_grn,z2[l_grn]);


l++; 
f++;

	printf("\n");
}

//}
//for(m =0; m < l_grn; m++){
//printf("w[%d]=%d\n",m,w[m]);
//}

p[0]=1;
for (x = 1;x < c+1; x++){
	p[x]=p[x-1]+1;
//printf("syka[%d]=%d\n", x, p[x]);
}	

printf(" \n");
qSort(w, 0, l-1);

//for(m =0; m < l_grn; m++){
//printf("h[%d]=%d\n",m,w[m]);
//}


indsort(w, z2, p, c);
//for(m =0; m < l_grn; m++){
	//printf("p[%d]-%d\n", m, p[m] );
//}
		//printf("+%d+", b[2][0][0]);
//for(m = 0;  m < l; m++){
//g=p[m];
	//printf("g[%d]-%d\n", m, g );
//	printf("\n" );
//	for (i = 0; i < rnk[g];i++) {
//		for(j = 0; j < rnk[g]; j++) {
//			printf("%d", b[g][i][j]);
//		}
//	}
//}
for(m = 0;  m < l; m++){
	g=p[m];
	//printf("g[%d]-%d\n", m, g );
	printf("\n" );
	for (i = 0; i < rnk[g];i++) {
		for(j = 0; j < rnk[g]; j++) {
			printf("%d", heh[g][i][j]);
		}
		printf("\n" );
	}
	
}


return 0;
}

